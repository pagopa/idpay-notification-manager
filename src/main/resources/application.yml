mongo:
  request-rate-too-large:
    api:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_API_ENABLED:false}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_RETRY:0}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_MILLIS_ELAPSED:200}
    batch:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_ENABLED:true}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_RETRY:5}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_MILLIS_ELAPSED:0}

rest-client:
  decrypt:
    api-key: ${PDV_DECRYPT_API_KEY:}
    base-url: ${PDV_DECRYPT_BASE_URL:}
    serviceCode: pdv-ms-tokenizer
  notification:
    backend-io:
      notify.url: ${IO_BACKEND_NOTIFY_URL:}
      profile.url: ${IO_BACKEND_PROFILE_URL:}
      service.url: ${IO_BACKEND_SERVICE_URL:}
      ttl: 3600
      base-url: ${IO_BACKEND_BASE_URL:}
      serviceCode: backend-io-notification
  initiative:
    service:
      name: ms-initiative
      base-url: ${INITIATIVE_MS_BASE_URL:}/idpay/initiative

management:
  health:
    redis.enabled: ${REDIS_CACHE_ENABLED:false}
    mongo.enabled: ${HEALTH_MONGO_ENABLED:true}
  endpoint:
    health:
      probes.enabled: true
      group:
        readiness.include: "*"
        liveness.include: livenessState,diskSpace,ping,binders,streams
      logging.slow-indicator-threshold: ${HEALTH_ACTUATOR_LOGGER_TIMEOUT_DURATION:PT1S}
  endpoints:
    jmx:
      exposure.include: "*"
    web:
      exposure.include: info, health

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  cache:
    type: redis
  cloud:
    function:
      definition: anyNotificationConsumer;onboardingConsumer;commandsConsumer
    stream:
      binders:
        kafka-notification:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
              configuration:
                sasl.jaas.config: ${KAFKA_NOTIFICATION_SASL_JAAS_CONFIG:}
        kafka-outcome:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
              configuration:
                sasl.jaas.config: ${KAFKA_OUTCOME_SASL_JAAS_CONFIG:}
        kafka-command:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_COMMANDS_BINDER_BROKER_ENDPOINT_LIST:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_COMMANDS_SASL_JAAS_CONFIG:}
        kafka-outcome-out:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
              configuration:
                sasl.jaas.config: ${KAFKA_OUTCOME_OUT_SASL_JAAS_CONFIG:}
      bindings:
        notificationQueue-out-0:
          binder: kafka-outcome-out
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_OUTCOME}
        onboardingConsumer-in-0:
          binder: kafka-outcome
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_OUTCOME:}
          group: ${KAFKA_OUTCOME_GROUP_IN:}
        anyNotificationConsumer-in-0:
          binder: kafka-notification
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_NOTIFICATION:}
          group: ${KAFKA_NOTIFICATION_GROUP_IN:}
          consumer:
#can be used with a consumer group (non-exclusive queue) to process events in multiple threads
            concurrency: ${KAFKA_NOTIFICATION_CONSUMER_CONCURRENCY:3} #translated as num.stream.threads by the binder, same as spring.cloud.stream.kafka.streams.binder.configuration.num.stream.threads
        commandsConsumer-in-0:
          binder: kafka-command
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_COMMANDS_TOPIC:idpay-commands}
          group: ${KAFKA_COMMANDS_GROUP_IN:idpay-commands-notification-consumer-group}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:30000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            metadata.max.age.ms: ${KAFKA_CONFIG_METADATA_MAX_AGE:180000}
            sasl.mechanism: ${KAFKA_NOTIFICATION_SASL_MECHANISM:}
            security.protocol: ${KAFKA_NOTIFICATION_SECURITY_PROTOCOL:}
            max.request.size: ${KAFKA_CONFIG_MAX_REQUEST_SIZE:1000000}
        bindings:
          onboardingConsumer-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_OUTCOME_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_OUTCOME_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                max.poll:
                  interval.ms: ${KAFKA_OUTCOME_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_OUTCOME_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_OUTCOME_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_OUTCOME_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_OUTCOME_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_OUTCOME_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
          anyNotificationConsumer-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_NOTIFICATION_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                max.poll:
                  interval.ms: ${KAFKA_NOTIFICATION_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_NOTIFICATION_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_NOTIFICATION_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_NOTIFICATION_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
          commandsConsumer-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_COMMANDS_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                max.poll:
                  interval.ms: ${KAFKA_COMMANDS_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_COMMANDS_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_COMMANDS_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_COMMANDS_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}

  config:
    activate:
      on-profile: default
  data:
    redis:
      url: ${REDIS_CONNECTION_URL:redis://@localhost:6379}
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

notification:
  manager:
    markdown:
      ko:
        ranking: ${MARKDOWN_KO_RANKING:Purtroppo non è stato possibile attivare %initiativeName% in quanto i tuoi requisiti non rientrano nella graduatoria.}
        budget: ${MARKDOWN_KO_BUDGET_EXHAUSTED:Purtroppo non è stato possibile attivare %initiativeName% in quanto è terminato il budget disponibile.}
        rejected.noRetry: ${MARKDOWN_KO_REJECTED_NO_RETRY:Purtroppo non è stato possibile aderire a %initiativeName% per i seguenti motivi:}
        tech: |-
          ${MARKDOWN_KO_TECH:Si è verificato un errore nel processare la tua richiesta di %initiativeName%.
          Ti chiediamo di riprovare.}
        apology: ${MARKDOWN_APOLOGY:Ci scusiamo per il disagio.}
        mistake: ${MARKDOWN_KO_MISTAKE:Se ritieni che ci sia stato un errore puoi segnalarlo direttamente all'Ente erogatore dell'iniziativa.}
        checkIban: |- 
          ${MARKDOWN_KO_CHECKIBAN:Il codice iban che hai inserito risulta essere errato. Ti chiediamo di modificarlo per evitare lasciare scoperte le iniziative associate e non ricevere i rimborsi (nel caso tu ne fossi beneficiario).
          
          Per modificare l'IBAN errato ti basta andare **Profilo > I tuoi dati > I tuoi IBAN** e seguire le indicazioni, oppure cliccare direttamente qui sotto.}
        pdnd: ${MARKDOWN_KO_PDND:Purtroppo non hai i requisiti necessari per aderire a %initiativeName% per i seguenti motivi:}
        refund: ${MARKDOWN_KO_REFUND:Purtroppo non è stato possibile accreditarti il rimborso.
          
                Ti chiediamo di modificare l'IBAN.
                Per modificare l'IBAN errato ti basta andare **Profilo > I tuoi dati > I tuoi IBAN** e seguire le indicazioni.
                }
      double.new.line: |-
            ${MARKDOWN_DOUBLE_NEW_LINE:

            }
      ok: |-
        ${MARKDOWN_OK:Buone notizie! Hai ottenuto %initiativeName%. Da questo momento puoi visualizzare il bonus nella sezione Portafoglio dell'app IO.

        Ti ricordiamo che per iniziare ad usufruire del bonus devi configurare almeno un metodo di pagamento.

        Puoi trovare maggiori informazioni sul [sito](http://example.com/).}

      ok.refund: |-
        ${MARKDOWN_OK_REFUND:Ti è stato accreditato un rimborso di %effectiveReward% euro!
        
        Puoi controllare il bonus disponibile direttamente nella pagina dell'iniziativa.}

      ok.cta: |-
        ${MARKDOWN_OK_CTA:---
        it:
            cta_1: 
                text: "Vai all'iniziativa"
                action: "ioit://idpay/initiative/%initiativeId%"
        en:
            cta_1: 
                text: "Go to the bonus page"
                action: "ioit://idpay/initiative/%initiativeId%"
        ---}
      demanded: |-
        ${MARKDOWN_DEMANDED:Buone notizie! Grazie ad un tuo familiare puoi ottenere %initiativeName%.
        
        Aderisce e configura almeno un metodo di pagamento per usufruire del bonus.
        
        Puoi trovare maggiori informazioni sul [sito](http://example.com/).}
      suspension: ${MARKDOWN_SUSPENSION:In seguito ad alcune verifiche, il tuo profilo è stato sospeso dall'iniziativa.
                  Gli importi ancora da erogare saranno sospesi e le transazioni a partire da questo momento non saranno riconosciute come valide ai fini dell'iniziativa.
                  Contatta l'assistenza al numero XXXXX per capire come risolvere entro 60 giorni a partire da oggi e comunica il codice protocollo XXXX.}
      readmission: ${MARKDOWN_READMISSION:In seguito ad alcune verifiche, il tuo profilo è stato riammesso all'iniziativa.
                   Gli importi precedentemente sospesi saranno riammessi e rimborsati nel prossimo ordine di rimborso a tuo favore.}
      initiative:
        publishing: |-
          ${MARKDOWN_INITIATIVE_PUBLISHING:**Fino al 31 agosto 2022** puoi ottenere il tuo Bonus Cultura di 500 euro per acquistare:
          biglietti per cinema, teatri, concerti, eventi culturali, musei, monumenti e parchi archeologici;
          musica, libri, abbonamenti a quotidiani e periodici, anche in formato digitale;
          corsi di teatro, musica, danza e lingue straniere.
          
          **Spendere il bonus è semplicissimo**: al momento dell’acquisto, online e presso gli esercenti fisici, **paga con la tua carta d’identità elettronica** o la tua tessera sanitaria. In alternativa, puoi sempre anticipare la spesa con uno dei tuoi metodi di pagamento...
          }
    subject:
      ok: ${SUBJECT_OK:Il tuo Bonus è attivo}
      demanded: ${SUBJECT_DEMANDED:Attiva il bonus %initiativeName%}
      ok.refund: ${SUBJECT_OK_REFUND:Ti è stato accreditato un rimborso!}
      ko: ${SUBJECT_KO:Non è stato possibile attivare %initiativeName%}
      ko.refund: ${SUBJECT_KO_REFUND:Non è stato possibile effettuare il rimborso}
      ko.checkIban: ${SUBJECT_KO_CHECKIBAN:L'IBAN che hai inserito è errato}
      ko.tech: ${SUBJECT_KO_TECH:Abbiamo riscontrato dei problemi}
      ko.nodeValue: ${SUBJECT_KO:Non è stato possibile attivare %initiativeName%}
      initiative:
        publishing: ${SUBJECT_INITIATIVE_PUBLISHING:Ottieni il tuo bonus da 500€!}
      suspension: ${SUBJECT_SUSPENSION:Sospensione temporanea da iniziativa %initiativeName%}
      readmission: ${SUBJECT_READMISSION:Riammissione a iniziativa %initiativeName%}
    recover:
      schedule: ${SCHEDULE_RECOVER_KO_NOTIFICATION:0 0 * ? * *} # every hour
      parallelism: ${RECOVER_PARALLELISM_THREADS:7}
      minutes-before: ${STUCK_RECOVERS_MINUTES_BEFORE:1440}
      max-retries: ${RECOVER_MAX_RETRIES:3}
    threads:
      schedule-max-number: ${THREADS_SCHEDULE_MAX_NUMBER:1}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.notification.manager: ${LOG_LEVEL_NOTIFICATION_MANAGER:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.boot.availability: ${LOG_LEVEL_SPRING_BOOT_AVAILABILITY:DEBUG}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

util:
  crypto:
    aes:
      cipherInstance: ${UTIL_CRYPTO_AES_CIPHER_INSTANCE:AES/GCM/NoPadding}
      encoding: ${UTIL_CRYPTO_AES_ENCODING:UTF-8}
      secret-type:
        pbe:
          algorithm: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_ALGORITHM:PBKDF2WithHmacSHA1}
          salt: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_SALT:}
          keySize: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_KEY_SIZE:256}
          iterationCount: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_ITERATION_COUNT:10000}
          passphrase: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_PASSPHRASE:}
      mode:
        gcm:
          iv: ${UTIL_CRYPTO_AES_MODE_GCM_IV:}
          tLen: ${UTIL_CRYPTO_AES_MODE_GCM_TAG_LEN:16}
app:
  delete:
    paginationSize: ${DELETE_PAGINATION_SIZE:100}
    delayTime: ${DELETE_DELAY_TIME:1000}