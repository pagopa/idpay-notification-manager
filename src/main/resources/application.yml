rest-client:
  decrypt:
    api-key: ${PDV_DECRYPT_API_KEY:}
    base-url: ${PDV_DECRYPT_BASE_URL:}
    serviceCode: pdv-ms-tokenizer
  notification:
    backend-io:
      notify:
        url: ${IO_BACKEND_NOTIFY_URL:}
      profile:
        url: ${IO_BACKEND_PROFILE_URL:}
      service:
        url: ${IO_BACKEND_SERVICE_URL:}
      token-value: ${IO_BACKEND_API_KEY:}
      ttl: 3600
    base-url: ${IO_BACKEND_BASE_URL:}
    serviceCode: backend-io-notification
spring:
  application:
    name: idpay-notification-manager
  cloud:
    stream:
      function:
        definition: notificationQueue;walletConsumer;onboardingConsumer
      binders:
        kafka-notification:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_NOTIFICATION_SASL_JAAS_CONFIG:}
        kafka-outcome:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_OUTCOME_SASL_JAAS_CONFIG:}
        kafka-outcome-out:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_OUTCOME_OUT_SASL_JAAS_CONFIG:}
      bindings:
        notificationQueue-out-0:
          binder: kafka-outcome-out
          content-type: ${KAFKA_CONTENT_TYPE:application/json}TimelineRepository
          destination: ${KAFKA_TOPIC_OUTCOME}
        onboardingConsumer-in-0:
          binder: kafka-outcome
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_OUTCOME:}
          group: ${KAFKA_OUTCOME_GROUP_IN:}
        walletConsumer-in-0:
          binder: kafka-notification
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_NOTIFICATION:}
          group: ${KAFKA_NOTIFICATION_GROUP_IN:}
      kafka:
        binder:
          auto-create-topics: false
          brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:30000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_NOTIFICATION_SASL_MECHANISM:}
            security.protocol: ${KAFKA_NOTIFICATION_SECURITY_PROTOCOL:}
        bindings:
          onboardingConsumer-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_OUTCOME_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_OUTCOME_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}}
                max.poll:
                  interval.ms: ${KAFKA_OUTCOME_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_OUTCOME_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_OUTCOME_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_OUTCOME_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_OUTCOME_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_OUTCOME_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
          walletConsumer-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_NOTIFICATION_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}}
                max.poll:
                  interval.ms: ${KAFKA_NOTIFICATION_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_NOTIFICATION_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_NOTIFICATION_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_NOTIFICATION_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_NOTIFICATION_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
  config:
    activate:
      on-profile: default
  data:
    mongodb:
      database: ${MONGODB_DBNAME}
      uri: ${MONGODB_URI}

notification.manager:
  markdown:
    double.new.line: ${MARKDOWN_DOUBLE_NEW_LINE:\n\n}
    ok: ${MARKDOWN_OK:Buone notizie! Hai ottenuto %initiativeName%. Da questo momento puoi visualizzare il bonus nella sezione Portafoglio dell'app IO.\n\nTi ricordiamo che per iniziare ad usufruire del bonus devi configurare almeno un metodo di pagamento.\n\nPuoi trovare maggiori informazioni sul [sito](http://example.com/).}
    ko:
      pdnd: ${MARKDOWN_KO_PDND:Purtroppo non hai i requisiti necessari per aderire a %initiativeName% per i seguenti motivi:}
      ranking: ${MARKDOWN_KO_RANKING:Purtroppo non \u00e8 stato possibile attivare %initiativeName% in quanto i tuoi requisiti non rientrano nella graduatoria.}
      mistake: ${MARKDOWN_KO_MISTAKE:Se ritieni che ci sia stato un errore puoi segnalarlo direttamente all'Ente erogatore dell'iniziativa.}
      tech: ${MARKDOWN_KO_TECH:Si \u00e8 verificato un errore nel processare la tua richiesta di %initiativeName%.\nTi chiediamo di riprovare.}
      apology: ${MARKDOWN_APOLOGY:Ci scusiamo per il disagio.}
      checkIban: ${MARKDOWN_KO_CHECKIBAN:Il codice iban che hai inserito risulta essere\nerrato. Ti chiediamo di modificarlo per evitare di\nlasciare scoperte le iniziative associate e non\nricevere i rimborse(nel caso tu ne fossi\nbeneficiario. \n\nPer modificare l'IBAN errato ti basta andare\nProfilo>I tuoi dati>I tuoi IBAN e seguire le\nindicazioni, oppure cliccare direttamente qui\nsotto.}
  subject:
    ok: ${SUBJECT_OK:Il tuo Bonus \u00e8 attivo}
    ko: ${SUBJECT_KO:Non \u00e8 stato possibile attivare %initiativeName%}
    ko.tech: ${SUBJECT_KO_TECH:Abbiamo riscontrato dei problemi}
    ko.checkIban: ${SUBJECT_KO_CHECKIBAN:L'IBAN che hai inserito \u00e8 errato}